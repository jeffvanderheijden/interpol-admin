{"version":3,"file":"component---src-pages-index-js-7cfc9fac11afb07ec3e0.js","mappings":"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","sources":["webpack://admin-panel/./src/helpers/data/dataLayer.js","webpack://admin-panel/./src/components/Login/Login.js","webpack://admin-panel/./src/pages/index.js"],"sourcesContent":["const dataLayer = () => {\n    let groupsData = [];\n\n    const getGroups = async () => {\n        try {\n            const response = await fetch(\"https://api.interpol.sd-lab.nl/api/groups\");\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getStudents = async (groupId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/students-by-group?id=${groupId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getChallenges = async (groupId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/challenges-by-group?id=${groupId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getChallenge = async (challengeId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/challenge-by-id?id=${challengeId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n\n    const fetchAllData = async () => {\n        const groups = await getGroups();\n        if (groups.length > 0) {\n            for (const group of groups) {\n                let dataRow = group;\n\n                const students = await getStudents(group.id);\n                dataRow.students = students;\n\n                const challenges = await getChallenges(group.id);\n\n                for (const challenge of challenges) {\n                    await getChallenge(challenge.challenge_id)\n                        .then(data => {\n                            challenge['name'] = data[0].name;\n                            challenge['minimum_points'] = data[0].minimum_points;\n                            challenge['time_limit'] = data[0].time_limit;\n                        }).catch(error => console.error(error));\n                }\n                dataRow.challenges = challenges;\n\n                groupsData.push(dataRow);\n            }\n        } else {\n            console.warn('No groups found.');\n        }\n\n        return groupsData;\n    };\n\n    return fetchAllData();\n}\n\nexport const checkSession = async () => {\n    try {\n        const response = await fetch('https://api.interpol.sd-lab.nl/api/check-type', {\n            method: 'GET',\n            credentials: 'include' // Include cookies in the request\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const userData = await response.json();\n\n        if (userData.error) {\n            console.error('Error checking session:', userData.error);\n            return false;\n        }\n\n        // Check if user is logged in as DOCENT\n        return userData === 'DOCENT' ? true : false;\n\n    } catch (error) {\n        console.error('Error checking session:', error);\n        return false;\n    }\n}\n\nexport default dataLayer;","import React, { useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { checkSession } from \"./../../helpers/data/dataLayer\";\nimport \"./Login.css\";\n\nconst Login = () => {\n    // LDAP login form\n    async function submitForm(e) {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('username', e.target.elements.username.value);\n        formData.append('password', e.target.elements.password.value);\n\n        try {\n            const response = await fetch('https://api.interpol.sd-lab.nl/api/create-session', {\n                method: 'POST',\n                body: formData,\n                credentials: 'include' // Ensure cookies are included with the request\n            });\n\n            const responseText = await response.text(); // Read the raw response body as text\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const login = JSON.parse(responseText); // Parse the response text as JSON\n\n            // Do something with the login response, e.g., handle login success or error\n            if (login.error) {\n                console.error('Login error:', login.error);\n            } else {\n                console.log('Login successful:', login.message);\n                navigate('/dashboard/');\n            }\n\n        } catch (error) {\n            console.error('Error creating session:', error);\n        }\n    }\n\n    // Check if user is logged in as a teacher\n    useEffect(() => {\n        checkSession().then(isTeacher => {\n            isTeacher && navigate('/dashboard');\n        });\n    }, []);\n\n    return (\n        <div id=\"loginWrapper\">\n            <form id=\"loginForm\" onSubmit={(e) => { submitForm(e) }}>\n                <input type=\"text\" id=\"username\" placeholder=\"Username\" />\n                <input type=\"password\" id=\"password\" placeholder=\"Password\" />\n                <button type=\"submit\" className=\"btn\"><span>Inloggen</span></button>\n            </form>\n        </div>\n    );\n}\n\nexport default Login;","import React from \"react\";\nimport \"./../helpers/styles/reset.css\";\nimport \"./../helpers/styles/button.css\";\nimport Login from \"../components/Login/Login\";\n\nconst LoginPage = () => {\n    return (\n        <Login />\n    )\n}\n\nexport default LoginPage\n\nexport const Head = () => <title>Login</title>"],"names":["checkSession","async","response","fetch","method","credentials","ok","Error","status","userData","json","error","console","groupsData","getStudents","groupId","getChallenges","getChallenge","challengeId","groups","getGroups","length","group","dataRow","students","id","challenges","challenge","challenge_id","then","data","name","minimum_points","time_limit","catch","push","warn","fetchAllData","useEffect","isTeacher","navigate","onSubmit","e","preventDefault","formData","FormData","append","target","elements","username","value","password","body","responseText","text","login","JSON","parse","log","message","submitForm","type","placeholder","className","Head"],"sourceRoot":""}