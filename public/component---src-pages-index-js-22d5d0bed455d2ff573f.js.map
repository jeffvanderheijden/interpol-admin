{"version":3,"file":"component---src-pages-index-js-22d5d0bed455d2ff573f.js","mappings":"gJAAA,MAAMA,EAAM,qCA+BCC,EAAcC,UACvB,IACI,MAAMC,QAAiBC,MAASJ,EAAG,yBAAyBK,GAC5D,aAAaF,EAASG,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAaSE,EAAgBP,UACzB,IACI,MAAMC,QAAiBC,MAASJ,EAAG,2BAA2BK,GAC9D,aAAaF,EAASG,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAGSG,EAAeR,UACxB,IACI,MAAMC,QAAiBC,MAASJ,EAAG,uBAAuBW,GAC1D,aAAaR,EAASG,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAyDSK,EAAeV,UACxB,IACI,MAAMC,QAAiBC,MAASJ,EAAG,cAAe,CAC9Ca,OAAQ,MACRC,YAAa,YAGjB,IAAKX,EAASY,GACV,MAAM,IAAIC,MAAM,uBAAuBb,EAASc,QAGpD,MAAMC,QAAiBf,EAASG,OAEhC,OAAIY,GAAYA,EAASX,OACrBC,QAAQD,MAAM,0BAA2BW,EAASX,QAC3C,GAIS,WAAbW,CAEX,CAAE,MAAOX,GAEL,OADAC,QAAQD,MAAM,0BAA2BA,IAClC,CACX,GAGJ,KA/DkB,KACd,IAAIY,EAAa,GAgCjB,MA9BqBjB,WACjB,MAAMkB,OApDWlB,WACrB,IACI,MAAMC,QAAiBC,MAASJ,EAAG,WACnC,aAAaG,EAASG,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GA6CyBc,GACrB,GAAID,EAAOE,OAAS,EAChB,IAAK,MAAMC,KAASH,EAAQ,CACxB,IAAII,EAAUD,EAEd,MAAME,QAAiBxB,EAAYsB,EAAMG,IACzCF,EAAQC,SAAWA,EAEnB,MAAME,QAAmBlB,EAAcc,EAAMG,IAE7C,IAAK,MAAME,KAAaD,QACdjB,EAAakB,EAAUC,cACxBC,MAAKC,IACFH,EAAgB,KAAIG,EAAK,GAAGC,KAC5BJ,EAA0B,eAAIG,EAAK,GAAGE,eACtCL,EAAsB,WAAIG,EAAK,GAAGG,UAAU,IAC7CC,OAAM5B,GAASC,QAAQD,MAAMA,KAExCiB,EAAQG,WAAaA,EAErBR,EAAWiB,KAAKZ,EACpB,MAEAhB,QAAQ6B,KAAK,oBAGjB,OAAOlB,CAAU,EAGdmB,EAAc,C,gICxFzB,MA7Bc,MAYVC,EAAAA,EAAAA,YAAU,MACN3B,EAAAA,EAAAA,MAAekB,MAAKU,IAChBA,IAAaC,EAAAA,EAAAA,UAAS,aAAa,GACrC,GACH,IAGC,uBAAKf,GAAG,gBACJ,wBAAMA,GAAG,YAAYgB,SAAWC,IAlBrBzC,WACfyC,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,WAAYJ,EAAEK,OAAOC,SAASC,SAASC,OACvDN,EAASE,OAAO,WAAYJ,EAAEK,OAAOC,SAASG,SAASD,OAEvDE,MAAMR,EAAS,EAY6BS,CAAWX,EAAE,GACjD,yBAAOY,KAAK,OAAO7B,GAAG,WAAW8B,YAAY,aAC7C,yBAAOD,KAAK,WAAW7B,GAAG,WAAW8B,YAAY,aACjD,0BAAQD,KAAK,SAASE,UAAU,OAAM,4BAAM,gBCjB5D,MANkB,IAEV,gBAAC,EAAK,MAMP,MAAMC,EAAO,IAAM,6BAAO,Q","sources":["webpack://admin-panel/./src/helpers/data/dataLayer.js","webpack://admin-panel/./src/components/Login/Login.js","webpack://admin-panel/./src/pages/index.js"],"sourcesContent":["const api = \"https://api.interpol.sd-lab.nl/api\";\n\nexport const login = async (formData) => {\n    try {\n        const response = await fetch('https://api.interpol.sd-lab.nl/api/create-session', {\n            method: 'POST',\n            body: formData,\n            credentials: 'include' // Ensure cookies are included with the request\n        });\n\n        const responseText = await response.text(); // Read the raw response body as text\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const loginResponse = JSON.parse(responseText); // Parse the response text as JSON\n\n        // Do something with the login response, e.g., handle login success or error\n        if (loginResponse.error) {\n            console.error('Login error:', loginResponse.error);\n        } else {\n            console.log('Login successful:', loginResponse.message);\n            navigate('/dashboard/');\n        }\n\n    } catch (error) {\n        console.error('Error creating session:', error);\n    }\n}\n\nexport const getStudents = async (groupId) => {\n    try {\n        const response = await fetch(`${api}/students-by-group?id=${groupId}`);\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n};\n\nexport const getGroups = async () => {\n    try {\n        const response = await fetch(`${api}/groups`);\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n};\n\nexport const getChallenges = async (groupId) => {\n    try {\n        const response = await fetch(`${api}/challenges-by-group?id=${groupId}`);\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n};\n\nexport const getChallenge = async (challengeId) => {\n    try {\n        const response = await fetch(`${api}/challenge-by-id?id=${challengeId}`);\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n};\n\nexport const removeStudent = async (studentId) => {\n    try {\n        const response = await fetch(`${api}/remove-student?id=${studentId}`, {\n            method: 'DELETE',\n            credentials: 'include'\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n}\n\nconst dataLayer = () => {\n    let groupsData = [];\n\n    const fetchAllData = async () => {\n        const groups = await getGroups();\n        if (groups.length > 0) {\n            for (const group of groups) {\n                let dataRow = group;\n\n                const students = await getStudents(group.id);\n                dataRow.students = students;\n\n                const challenges = await getChallenges(group.id);\n\n                for (const challenge of challenges) {\n                    await getChallenge(challenge.challenge_id)\n                        .then(data => {\n                            challenge['name'] = data[0].name;\n                            challenge['minimum_points'] = data[0].minimum_points;\n                            challenge['time_limit'] = data[0].time_limit;\n                        }).catch(error => console.error(error));\n                }\n                dataRow.challenges = challenges;\n\n                groupsData.push(dataRow);\n            }\n        } else {\n            console.warn('No groups found.');\n        }\n\n        return groupsData;\n    };\n\n    return fetchAllData();\n}\n\nexport const checkSession = async () => {\n    try {\n        const response = await fetch(`${api}/check-type`, {\n            method: 'GET',\n            credentials: 'include' // Include cookies in the request\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const userData = await response.json();\n\n        if (userData && userData.error) {\n            console.error('Error checking session:', userData.error);\n            return false;\n        }\n\n        // Check if user is logged in as DOCENT\n        return userData === 'DOCENT' ? true : false;\n\n    } catch (error) {\n        console.error('Error checking session:', error);\n        return false;\n    }\n}\n\nexport default dataLayer;","import React, { useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { checkSession } from \"./../../helpers/data/dataLayer\";\nimport \"./Login.css\";\n\nconst Login = () => {\n    // LDAP login form\n    const submitForm = async (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('username', e.target.elements.username.value);\n        formData.append('password', e.target.elements.password.value);\n\n        login(formData);\n    }\n\n    // Check if user is logged in as a teacher\n    useEffect(() => {\n        checkSession().then(isTeacher => {\n            isTeacher && navigate('/dashboard');\n        });\n    }, []);\n\n    return (\n        <div id=\"loginWrapper\">\n            <form id=\"loginForm\" onSubmit={(e) => { submitForm(e) }}>\n                <input type=\"text\" id=\"username\" placeholder=\"Username\" />\n                <input type=\"password\" id=\"password\" placeholder=\"Password\" />\n                <button type=\"submit\" className=\"btn\"><span>Inloggen</span></button>\n            </form>\n        </div>\n    );\n}\n\nexport default Login;","import React from \"react\";\nimport \"./../helpers/styles/reset.css\";\nimport \"./../helpers/styles/button.css\";\nimport Login from \"../components/Login/Login\";\n\nconst LoginPage = () => {\n    return (\n        <Login />\n    )\n}\n\nexport default LoginPage\n\nexport const Head = () => <title>Login</title>"],"names":["api","getStudents","async","response","fetch","groupId","json","error","console","getChallenges","getChallenge","challengeId","checkSession","method","credentials","ok","Error","status","userData","groupsData","groups","getGroups","length","group","dataRow","students","id","challenges","challenge","challenge_id","then","data","name","minimum_points","time_limit","catch","push","warn","fetchAllData","useEffect","isTeacher","navigate","onSubmit","e","preventDefault","formData","FormData","append","target","elements","username","value","password","login","submitForm","type","placeholder","className","Head"],"sourceRoot":""}