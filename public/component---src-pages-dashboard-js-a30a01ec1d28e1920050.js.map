{"version":3,"file":"component---src-pages-dashboard-js-a30a01ec1d28e1920050.js","mappings":"+IAAA,MA4EaA,EAAeC,UACxB,IACI,MAAMC,QAAiBC,MAAM,gDAAiD,CAC1EC,OAAQ,MACRC,YAAa,YAGjB,IAAKH,EAASI,GACV,MAAM,IAAIC,MAAM,uBAAuBL,EAASM,QAGpD,MAAMC,QAAiBP,EAASQ,OAEhC,OAAID,EAASE,OACTC,QAAQD,MAAM,0BAA2BF,EAASE,QAC3C,GAIS,WAAbF,CAEX,CAAE,MAAOE,GAEL,OADAC,QAAQD,MAAM,0BAA2BA,IAClC,CACX,GAGJ,IAvGkB,KACd,IAAIE,EAAa,GAEjB,MAUMC,EAAcb,UAChB,IACI,MAAMC,QAAiBC,MAAM,2DAA2DY,GACxF,aAAab,EAASQ,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAGEK,EAAgBf,UAClB,IACI,MAAMC,QAAiBC,MAAM,6DAA6DY,GAC1F,aAAab,EAASQ,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAGEM,EAAehB,UACjB,IACI,MAAMC,QAAiBC,MAAM,yDAAyDe,GACtF,aAAahB,EAASQ,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAiCJ,MA9BqBV,WACjB,MAAMkB,OAzCQlB,WACd,IACI,MAAMC,QAAiBC,MAAM,6CAC7B,aAAaD,EAASQ,MAC1B,CAAE,MAAOC,GAEL,OADAC,QAAQD,MAAMA,GACP,EACX,GAkCqBS,GACrB,GAAID,EAAOE,OAAS,EAChB,IAAK,MAAMC,KAASH,EAAQ,CACxB,IAAII,EAAUD,EAEd,MAAME,QAAiBV,EAAYQ,EAAMG,IACzCF,EAAQC,SAAWA,EAEnB,MAAME,QAAmBV,EAAcM,EAAMG,IAE7C,IAAK,MAAME,KAAaD,QACdT,EAAaU,EAAUC,cACxBC,MAAKC,IACFH,EAAgB,KAAIG,EAAK,GAAGC,KAC5BJ,EAA0B,eAAIG,EAAK,GAAGE,eACtCL,EAAsB,WAAIG,EAAK,GAAGG,UAAU,IAC7CC,OAAMvB,GAASC,QAAQD,MAAMA,KAExCY,EAAQG,WAAaA,EAErBb,EAAWsB,KAAKZ,EACpB,MAEAX,QAAQwB,KAAK,oBAGjB,OAAOvB,CAAU,EAGdwB,EAAc,C,+HCnBzB,MAlDe,IAGR,IAHS,QACZC,EAAO,WACPC,GACH,EAsCG,OACI,2BAASd,GAAG,UACR,yBAAOe,KAAK,OAAOC,YAAY,sBAAsBC,SAAWC,IAvCnDA,KACjBJ,EAAW,IACJD,EACHM,YAAaD,EAAEE,OAAOC,OACxB,EAmC0EF,CAAYD,EAAE,EAAIG,MAAOR,EAAQM,cACzG,yBAAOJ,KAAK,OAAOC,YAAY,wBAAwBC,SAAWC,IAjCnDA,KACnBJ,EAAW,IACJD,EACHS,cAAeJ,EAAEE,OAAOC,OAC1B,EA6B4EC,CAAcJ,EAAE,EAAIG,MAAOR,EAAQS,gBAC7G,0BAAQC,QAAS,KA3BV/C,WACX,IACI,MAAMC,QAAiBC,MAAM,4CAA6C,CACtEC,OAAQ,OACRC,YAAa,YAGjB,IAAKH,EAASI,GACV,MAAM,IAAIC,MAAM,uBAAuBL,EAASM,QAGpD,MAAMsB,QAAa5B,EAASQ,OAC5BE,QAAQqC,IAAI,qBAAsBnB,EAAKoB,UAGvCC,EAAAA,EAAAA,UAAS,IAEb,CAAE,MAAOxC,GACLC,QAAQD,MAAM,qBAAsBA,EAExC,GAO6ByC,EAAQ,GAAI,aAC/B,ECgBlB,MA/De,IAER,IAFS,OACZjC,GACH,EAKG,OACI,2BAASM,GAAG,UACR,sBAAIA,GAAG,cACFN,GAAUA,EAAOkC,KAAI,CAAC/B,EAAOgC,IAC1B,sBAAIC,UAAU,QAAQC,IAAKF,GACvB,2BAASC,UAAU,gBACf,uBAAKA,UAAU,cACX,uBAAKE,IATlB,kCASmCnC,EAAMoC,UAAaC,IAAKrC,EAAMS,QAExD,2BACI,0BAAKT,EAAMS,MACX,yBAAIT,EAAMsC,SAIlB,2BAASL,UAAU,mBACf,0BACKjC,EAAME,SAAS6B,KAAI,CAACQ,EAASP,IAC1B,sBAAIE,IAAKF,GACL,yBAAIO,EAAQC,gBACZ,yBAAID,EAAQ9B,WAK5B,2BAASwB,UAAU,qBACdjC,EAAMI,WAAW2B,KAAI,CAAC1B,EAAW2B,IAC9B,sBAAIE,IAAKF,GACL,0BACI,0BAAK3B,EAAUI,MACf,2BACKJ,EAAUoC,UACP,4BAAM,KACN,4BAAM,WAO9B,2BAASR,UAAU,iBACdjC,EAAMI,WAAW2B,KAAI,CAAC1B,EAAW2B,IAC9B,sBAAIE,IAAKF,GACL,0BACI,0BAAK3B,EAAUqC,kBAQrC,ECWlB,MAhEsB,KACpB,MAAM,EAAC7C,EAAO,EAAC8C,IAAaC,EAAAA,EAAAA,UAAS,KAC/B,EAACC,EAAe,EAACC,IAAqBF,EAAAA,EAAAA,UAAS,KAC/C,EAAC5B,EAAQ,EAACC,IAAc2B,EAAAA,EAAAA,UAAS,CAAEtB,YAAa,GAAIG,cAAe,KAgDzE,OA9CAsB,EAAAA,EAAAA,YAAU,KACUpE,WACd,MAAM6B,QAAawC,EAAAA,EAAAA,KACnBL,EAAUnC,GACVsC,EAAkBtC,EAAK,EAE3ByC,EAAW,GACV,KAGHF,EAAAA,EAAAA,YAAU,MACRrE,EAAAA,EAAAA,KAAe6B,MAAK2C,IAClB5D,QAAQqC,IAAI,kCAAmCuB,GAC1CA,IACH5D,QAAQqC,IAAI,wCACZE,EAAAA,EAAAA,UAAS,KACX,GACA,GACD,CAAChC,KAGJkD,EAAAA,EAAAA,YAAU,KACR9B,EAAW,IAAKD,EAASS,cAAe,KACxC,MAAM0B,EAAmBnC,EAAQM,YAAY8B,cAEvCC,EAAiBxD,EAAOyD,QAAOtD,GACRA,EAAMS,KAAK2C,cAAcG,SAASJ,KAI/DL,EAAkBO,EAAe,GAChC,CAACrC,EAAQM,eAGZyB,EAAAA,EAAAA,YAAU,KACR9B,EAAW,IAAKD,EAASM,YAAa,KACtC,MAAMkC,EAAqBxC,EAAQS,cAAc2B,cAE3CK,EAAiB5D,EAAOyD,QAAOtD,GACjCA,EAAME,SAASwD,MAAKnB,GAClBA,EAAQ9B,KAAK2C,cAAcG,SAASC,OAG1CV,EAAkBW,EAAe,GAChC,CAACzC,EAAQS,gBAGV,4BACE,gBAAC,EAAM,CACLT,QAASA,EACTC,WAAYA,IAEd,gBAAC,EAAM,CACLpB,OAAQgD,IAEL,EAMJ,MAAMc,EAAO,IAAM,6BAAO,c","sources":["webpack://admin-panel/./src/helpers/data/dataLayer.js","webpack://admin-panel/./src/components/Filter/Filter.js","webpack://admin-panel/./src/components/Groups/Groups.js","webpack://admin-panel/./src/pages/dashboard.js"],"sourcesContent":["const dataLayer = () => {\n    let groupsData = [];\n\n    const getGroups = async () => {\n        try {\n            const response = await fetch(\"https://api.interpol.sd-lab.nl/api/groups\");\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getStudents = async (groupId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/students-by-group?id=${groupId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getChallenges = async (groupId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/challenges-by-group?id=${groupId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    };\n\n    const getChallenge = async (challengeId) => {\n        try {\n            const response = await fetch(`https://api.interpol.sd-lab.nl/api/challenge-by-id?id=${challengeId}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n\n    const fetchAllData = async () => {\n        const groups = await getGroups();\n        if (groups.length > 0) {\n            for (const group of groups) {\n                let dataRow = group;\n\n                const students = await getStudents(group.id);\n                dataRow.students = students;\n\n                const challenges = await getChallenges(group.id);\n\n                for (const challenge of challenges) {\n                    await getChallenge(challenge.challenge_id)\n                        .then(data => {\n                            challenge['name'] = data[0].name;\n                            challenge['minimum_points'] = data[0].minimum_points;\n                            challenge['time_limit'] = data[0].time_limit;\n                        }).catch(error => console.error(error));\n                }\n                dataRow.challenges = challenges;\n\n                groupsData.push(dataRow);\n            }\n        } else {\n            console.warn('No groups found.');\n        }\n\n        return groupsData;\n    };\n\n    return fetchAllData();\n}\n\nexport const checkSession = async () => {\n    try {\n        const response = await fetch('https://api.interpol.sd-lab.nl/api/check-type', {\n            method: 'GET',\n            credentials: 'include' // Include cookies in the request\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const userData = await response.json();\n\n        if (userData.error) {\n            console.error('Error checking session:', userData.error);\n            return false;\n        }\n\n        // Check if user is logged in as DOCENT\n        return userData === 'DOCENT' ? true : false;\n\n    } catch (error) {\n        console.error('Error checking session:', error);\n        return false;\n    }\n}\n\nexport default dataLayer;","import React from \"react\";\nimport { navigate } from \"@reach/router\";\nimport \"./Filter.css\";\n\nconst Filter = ({\n    filters,\n    setFilters\n}) => {\n    const searchGroup = (e) => {\n        setFilters({\n            ...filters,\n            searchGroup: e.target.value\n        })\n    }\n\n    const searchStudent = (e) => {\n        setFilters({\n            ...filters,\n            searchStudent: e.target.value\n        })\n    }\n\n    const logout = async () => {\n        try {\n            const response = await fetch('https://api.interpol.sd-lab.nl/api/logout', {\n                method: 'POST',\n                credentials: 'include' // Include cookies in the request\n            });\n    \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n    \n            const data = await response.json();\n            console.log('Logout successful:', data.message);\n    \n            // Redirect to login page or perform other actions\n            navigate('/');\n    \n        } catch (error) {\n            console.error('Error logging out:', error);\n            // Handle error, e.g., display error message\n        }\n    }\n\n    return (\n        <section id=\"filter\">\n            <input type=\"text\" placeholder=\"Zoek door groepen..\" onChange={(e) => { searchGroup(e) }} value={filters.searchGroup} />\n            <input type=\"text\" placeholder=\"Zoek door studenten..\" onChange={(e) => { searchStudent(e) }} value={filters.searchStudent} />\n            <button onClick={() => { logout() }}>Uitloggen</button>\n        </section>\n    );\n}\n\nexport default Filter;","import React from \"react\";\nimport \"./Groups.css\";\n\nconst Groups = ({\n    groups\n}) => {\n\n    // Change on deployment\n    const apiUrl = \"https://api.interpol.sd-lab.nl/\";\n\n    return (\n        <section id=\"groups\">\n            <ul id=\"group-tabs\">\n                {groups && groups.map((group, idx) => (\n                    <li className=\"group\" key={idx}>\n                        <section className=\"groupSection\">\n                            <div className=\"groupImage\">\n                                <img src={`${apiUrl + group.image_url}`} alt={group.name} />\n                            </div>\n                            <div>\n                                <h2>{group.name}</h2>\n                                <p>{group.class}</p>\n                            </div>\n                        </section>\n                        {/* Todo add student compontent here. */}\n                        <section className=\"studentsSection\">\n                            <ul>\n                                {group.students.map((student, idx) => (\n                                    <li key={idx}>\n                                        <p>{student.student_number}</p>\n                                        <p>{student.name}</p>                                        \n                                    </li>\n                                ))}\n                            </ul>\n                        </section>\n                        <section className=\"challengesSection\">\n                            {group.challenges.map((challenge, idx) => (\n                                <ul key={idx}>\n                                    <li>\n                                        <h3>{challenge.name}</h3>\n                                        <div>\n                                            {challenge.completed ? \n                                                <span>V</span> : \n                                                <span>X</span>\n                                            }\n                                        </div>\n                                    </li>\n                                </ul>\n                            ))}\n                        </section>\n                        <section className=\"challengeKeys\">\n                            {group.challenges.map((challenge, idx) => (\n                                <ul key={idx}>\n                                    <li>\n                                        <h3>{challenge.keycode}</h3>\n                                    </li>\n                                </ul>\n                            ))}\n                        </section>\n                    </li>\n                ))}\n            </ul>\n        </section>\n    );\n}\n\nexport default Groups;","\n\nimport React, { useState, useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\nimport dataLayer, { checkSession } from \"../helpers/data/dataLayer\";\nimport \"./../helpers/styles/reset.css\";\nimport Filter from \"../components/Filter/Filter\";\nimport Groups from \"../components/Groups/Groups\";\n\nconst DashboardPage = () => {\n  const [groups, setGroups] = useState([]); \n  const [filteredGroups, setFilteredGroups] = useState([]);\n  const [filters, setFilters] = useState({ searchGroup: '', searchStudent: '' });\n\n  useEffect(() => {\n    const fetchData = async () => {\n        const data = await dataLayer();\n        setGroups(data);\n        setFilteredGroups(data);\n    };\n    fetchData();\n  }, []);\n\n  // Check if user is logged in as a teacher\n  useEffect(() => {\n    checkSession().then(isTeacher => {\n      console.log('User is logged in as a teacher:', isTeacher)\n      if (!isTeacher) {\n        console.log('User is not logged in as a teacher.')\n        navigate('/');\n      }\n    });\n  }, [groups]);\n\n  // Searches for groups\n  useEffect(() => {\n    setFilters({ ...filters, searchStudent: '' });\n    const searchQueryGroup = filters.searchGroup.toLowerCase();\n\n    const searchedGroups = groups.filter(group => {\n        const groupNameMatches = group.name.toLowerCase().includes(searchQueryGroup);\n        return groupNameMatches;\n    });\n\n    setFilteredGroups(searchedGroups);\n  }, [filters.searchGroup]);\n\n  // Searches for students\n  useEffect(() => {\n    setFilters({ ...filters, searchGroup: '' });\n    const searchQueryStudent = filters.searchStudent.toLowerCase();\n\n    const studentMatches = groups.filter(group => (\n        group.students.some(student =>\n          student.name.toLowerCase().includes(searchQueryStudent)\n        ))\n    );\n    setFilteredGroups(studentMatches);\n  }, [filters.searchStudent]);\n\n  return (\n    <main>\n      <Filter \n        filters={filters}\n        setFilters={setFilters}\n      />\n      <Groups\n        groups={filteredGroups}\n      />\n    </main>\n  )\n}\n\nexport default DashboardPage\n\nexport const Head = () => <title>Admin panel</title>\n"],"names":["checkSession","async","response","fetch","method","credentials","ok","Error","status","userData","json","error","console","groupsData","getStudents","groupId","getChallenges","getChallenge","challengeId","groups","getGroups","length","group","dataRow","students","id","challenges","challenge","challenge_id","then","data","name","minimum_points","time_limit","catch","push","warn","fetchAllData","filters","setFilters","type","placeholder","onChange","e","searchGroup","target","value","searchStudent","onClick","log","message","navigate","logout","map","idx","className","key","src","image_url","alt","class","student","student_number","completed","keycode","setGroups","useState","filteredGroups","setFilteredGroups","useEffect","dataLayer","fetchData","isTeacher","searchQueryGroup","toLowerCase","searchedGroups","filter","includes","searchQueryStudent","studentMatches","some","Head"],"sourceRoot":""}